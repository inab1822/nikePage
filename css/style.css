@import url('https://fonts.googleapis.com/css2?family=Monoton&family=Play:wght@400;700&display=swap');


#wrap{
    position: relative;
    height: 100vh;
    overflow: hidden;
    background-color: #333;
    /* 
    vh  viewport height의 줄임말로,
    보고 이는 브라우저나 디바이스등 웹이
    출력되고 있는 화면의 높이를 나타냄

    100vh = 여러분의 브라우저 내의 
    윈도우(웹이 출력되는 화면)의 높이값의 100%
    innerHeight 값
    */
}

/* video */

/* 비디오는 비율이 망가지지 않습니다.
영상을 찌그러뜨려 출력할 많큼 기술력이 안됨...
그래서 너비와 높이 중 상대적으로 아래에 적힌 값에 맞춰
비율에 맞게끔 모양이 잡힙
*/
video{
    width: 100%;
    min-width: 1600px;
    /* 최소너비
    유동적인 환경에서 변할 수 있는 요소의 너비의
    minimum(최소값)을 제한 할 수 있는 속성
    <-> max-width
    */
}

header{
    position: absolute;
    top: 0;
    left: 0;
    width: 700px;
    height: 100vh;
    background-image: linear-gradient(-45deg, #e6fc55,#b9fb05,#97e031);
    /* 
    background-image 로 그레이디언트를 넣습니다
    (그라데이션과 그레이디언트 일단 같은 말입니다.)

    linear-gradient 선형그라데이션
    radial-gradient 원형그라데이션

    순서대로
    각도, 색상1, 색상2, 색상3...
    입력합니다.
    각도는 deg단위 사용하여 표기 가능하고,
    표기하지 않을시 위에서/아래로 진행됩니다.
    */
    
    transform: skew(-40deg);
    position: absolute;
    top: 0;
    left: -420px;
}
header h1{
    transform: skew(40deg);
    position: absolute;
    left: 200px;
    top: 40px;
}

.gnb{
    position: absolute;
    /* 
    posistion: absolute를 썼을 때는
    부모에게 반드시 position: relative를
    줘야한다 -> 이때까지 배운 룰

    사실은 부모가 relative뿐만이 아니라
    position관련된 속성 그 어떤 것 중 하나라도
    가지고 있으면 된다.

    그런데 왜 position: relative를 주라고 했느냐
    -> absolute나 fixed의 경우, 적응시키는 순간
    기존의 레이아웃에서 벗어나게 됩니다.
    */
    top: 150px;
    right: 0px;
    width: 220px;
    text-align: right;
}

.gnb li a{
    font-weight: bold;
    /* gnb 내부의 모든 li 내부의 a */
}

.gnb>li{
    position: relative;
}

.gnb>li>a{
    display: block;
    width: 100%;
    padding-right: 40px;
    box-sizing: border-box;
    /* 
    요소의 사이즈 안에 패딩과 보더를 포함시키는 것
    */
    /* 바로 밑의 자식만 잡기 */
    line-height: 50px;
    font-size: 18px;
}

.gnb>li>a span{
    transform: skew(40deg);
    display: block;
}

.gnb>li:hover>a, .gnb>.active>a{
    background-color: #000;
    color: #fff;
}
/* 
li태그 바로 뒤에있는 p만 선택
인접형제선택자
li+p{
    color: red;
}

일반형제선택자
li~p{
    color: pink;
}
*/

.gnb>li:hover .sub, .gnb .active .sub{
    left: 205px;
    opacity: 0.8;
}

.sub{
    position: absolute;
    left:0;
    top:0;
    transition: all 0.4s;
    opacity: 0;
}

.sub li{
    background-color: #222;
    font-size: 16px;
    text-align: center;
    color: #fff;
    line-height: 40px;
    width: 150px;
    border-bottom: 2px solid #b9fb05;
    margin-bottom: 3px;
    transition: all 0.5s;

}
.sub li a{
    display: block;
    transform: skew(40deg);
}
.sub li:hover{
    background-color: #b9fb05;
}

.sns{
    position: absolute;
    top: 60px;
    right: 50px;
    color: #b9fb05;
    font-size: 25px;
    display: flex;
    /* 
    a는 인라인이라 tranform이 먹히진 않지만 
    display: flex; 를 주면 인라인 요소가 아닌
    flex item이 된다.
    */
}

.sns a{
    margin-left: 30px;
    font-size: 25px;
    opacity: 0.5;
}

.sns a{
    transition: all 0.5s;  
}

.sns a:hover{
    opacity: 1;
    transform: scale(1.4);
}

article{
    position: absolute;
    top: 200px;
    right: 70px;
}
.txt1{
    font-size: 160px;
    color: #b9fb05;
    font-family: monoton;
    letter-spacing: -1px;
    line-height: 1;
    /* 
    line-height 기본값은 폰트사이즈의
    1.34~1.4배 정도로 책정되어 있습니다

    lin-height는 단위 없이 그냥 숫자만 줄 경우
    폰트의 n배로 적용됩니다.
    */

    
    
}
.txt1 span{
    font-size: 50px;
    color: #fff;
    font-style: italic;
    font-family: play;
}
.txt2{
    font-size: 34px;
    color: #bbb;
    font-family: play;
    letter-spacing: -2px;
}
.txt2 strong{
    font-size: 34px;
    color: #b9fb05;
    margin-left: 20px;
    font-family: arial;
    font-weight: bold;
}

section{
    transition: all 0.5s;
    width: 800px;
    height: 100vh;
    background-color: #111;
    position: absolute;
    bottom: 0;
    right: -800px;
    opacity: 0.5;
    transform: skew(-40deg);
}
section:hover{
    right: -500px;
    opacity: 0.8;
}

.con{
    transition: all 1s;
    width: 400px;
    height: 100vh;
    background-color: #000;
    position: absolute;
    left: 150px;
    bottom: 0;
    display: flex;
    flex-direction: column;
    justify-content: end;
    align-items: center;

}
section:hover .con{
    left: 50px;
}
.con a{
    opacity: 0;
    transform: translate(200px);
    /* translateX, Y 
    X 값은 왼>오른쪽으로 이동값
    Y 값은 위>아래로 이동값*/
    
}
.con a:nth-child(1){
    transition: all 0.4s;
}
.con a:nth-child(2){
    transition: all 0.8s;
}
.con a:nth-child(3){
    transition: all 1.2s;
}

section:hover a{
    transform: translate(0);
    opacity: 1;
}
.con a p{
    color: #a0bd50;
    font-weight: bold;
    margin-bottom: 5px;
    transform: skew(40deg);
}
.arrows{
    position: absolute;
    bottom: 40px;
    left: 100px;
    transform: skewX(40deg);
    width: 150px;
}
.arrows i{
    font-size: 60px;
    color: #b9fb05;
    position: absolute;
    bottom: 0;
    right: 0;
    opacity: 1;
    animation-name: arrows;
    animation-duration: 1.5s;
    animation-iteration-count: infinite;
    animation-timing-function: linear;
    
}
.arrows i:nth-child(2){
    animation-delay: 0.4s;
}
.arrows i:nth-child(3){
    animation-delay: 0.8s;
}
/* 
right 지점을 0에서 출발해서 100px까지 이동합니다
이동하는 중에 투명도가 점점 투명해져서 0까지 되고,
크기가 1.5배로 커집니다.

일정한 속도로 계속 반복이 되고,
한번 플레이타임은 1.5초
*/

@keyframes arrows{
    0%{
        opacity: 1;
        right: 0;
        transform: scale(1);
    }
    100%{
        opacity: 0;
        right: 100px;
        transform: scale(1.5);
        
    }
}
section:hover .arrows{
    display: none;
}